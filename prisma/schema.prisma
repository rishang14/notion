// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
} 


// --------------------
// MODELS
// --------------------
// =====================
// ENUMS
// =====================


// =====================
// MODELS (TABLES)
// =====================

model Workspace {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  workspaceOwner String
  title          String
  iconId         String
  data           String?
  inTrash        String?
  logo           String?
  bannerUrl      String?

  folders Folder[]
  files   File[]
  collaborators Collaborator[]
}

model Folder {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  title       String
  iconId      String
  data        String?
  inTrash     String?
  bannerUrl   String?
  workspaceId String

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  files     File[]
}

model File {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  title       String
  iconId      String
  data        String?
  inTrash     String?
  bannerUrl   String?
  workspaceId String
  folderId    String

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  folder    Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade)
}

model User {
  id             String   @id
  fullName       String?
  avatarUrl      String?
  billingAddress Json?
  updatedAt      DateTime?
  paymentMethod  Json?
  email          String?

  collaborators Collaborator[]
  subscriptions Subscription[]
}

model Customer {
  id              String @id
  stripeCustomerId String?
}

model Product {
  id          String  @id
  active      Boolean?
  name        String?
  description String?
  image       String?
  metadata    Json?

  prices Price[]
}

model Price {
  id             String   @id
  productId      String?
  active         Boolean?
  description    String?
  unitAmount     BigInt?
  currency       String?
  type           pricing_type?
  interval       pricing_plan_interval?
  intervalCount  Int?
  trialPeriodDays Int?
  metadata       Json?

  product Product? @relation(fields: [productId], references: [id])
  subscriptions Subscription[]
}

model Subscription {
  id                String   @id
  userId            String
  status            subscription_status?
  metadata          Json?
  priceId           String?
  quantity          Int?
  cancelAtPeriodEnd Boolean?
  created           DateTime @default(now())
  currentPeriodStart DateTime @default(now())
  currentPeriodEnd   DateTime @default(now())
  endedAt           DateTime?
  cancelAt          DateTime?
  canceledAt        DateTime?
  trialStart        DateTime?
  trialEnd          DateTime?

  user   User   @relation(fields: [userId], references: [id])
  price  Price? @relation(fields: [priceId], references: [id])
}

model Collaborator {
  id          String   @id @default(uuid())
  workspaceId String
  createdAt   DateTime @default(now())
  userId      String

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum key_status {
  expired
  invalid
  valid
  default
}

enum key_type {
  stream_xchacha20
  secretstream
  secretbox
  kdf
  generichash
  shorthash
  auth
  hmacsha256
  hmacsha512
  aead_det    @map("aead-det")   // Prisma doesn’t allow `-` → use @map
  aead_ietf   @map("aead-ietf")
}

enum factor_status {
  verified
  unverified
}

enum factor_type {
  webauthn
  totp
}

enum aal_level {
  aal3
  aal2
  aal1
}

enum code_challenge_method {
  plain
  s256
}

enum pricing_type {
  recurring
  one_time
}

enum pricing_plan_interval {
  year
  month
  week
  day
}

enum subscription_status {
  unpaid
  past_due
  incomplete_expired
  incomplete
  canceled
  active
  trialing
}

enum equality_op {
  in_   @map("in")   
  gte
  gt
  lte
  lt
  neq
  eq
}

enum action {
  ERROR
  TRUNCATE
  DELETE
  UPDATE
  INSERT
}